#include "std_lib_facilities.h"
using namespace std;
template<typename T> struct S {

public:
  S(T val) {cout<<val<<" "; this->val=val;};


T get();
T get() const;
T set(T x);
T read_val(T& v);
void le(const T& x);

private: T val;

};
template <typename T> T S<T>::get()
{
  return val;
}

template <typename T> T S<T>::get() const
{
  return val;
}

template <typename T> T S<T>::set(T x)
{
  val=x;
}

template <typename T> read_val(T & v)
{
    cin>>v;
}

template <typename T>
void S<T>::le(const T& x)
{
  val = x;
}
int main() {
  S<int> szam(5);
  S<char> betu('a');
  S<double> d(0.5);
  S<string> szoveg("abc");
  cout<<endl;
  //S<vector<int>> f(vector<int> v (5));
  cout<<szam.get()<<" "<<betu.get()<<" "<<d.get()<<" "<<e.get();

  cout<<"Int"<<endl;
  int k;
  read_val(k);
  szam.le(k);
  cout<<szam.get();
  cout<<endl;

  cout<<"char"<<endl;
  char ch;
  read_val(ch);
  b.le(ch);
  cout<<betu.get();
  cout<<endl;

  cout<<"double"<<endl;
  double do;
  read_val(do);
  d.le(do);
  cout<<d.get();
  cout<<endl;

  cout<<"string"<<endl;
  string strs;
  read_val(strs);
  szoveg.le(strs);
  cout<<szoveg.get();
  cout<<endl;
  
  return 0;
}
